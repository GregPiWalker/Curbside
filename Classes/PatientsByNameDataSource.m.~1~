//
//  PatientsByNameDataSource.m
//  CurbSide
//
//  Created by Greg Walker on 3/14/11.
//  Copyright 2011 __MyCompanyName__. All rights reserved.
//

#import "PatientsByNameDataSource.h"

@interface PatientsByNameDataSource ()

-(void) subscribeToNotifications: (BOOL)yesNo;

-(void) presortSections;

-(NSMutableArray *) alphabetizeSection: (NSArray *)sectionData;

-(BOOL) tryInsertPatient: (Patient *)p withIndex: (NSString *)i byFirstName: (BOOL)byFirstName;

-(BOOL) tryRemovePatient: (Patient *)p withIndex: (NSString *)i byFirstName: (BOOL)byFirstName;

@end


@implementation PatientsByNameDataSource


@synthesize dataSortedOnFirstName;
@synthesize dataSortedOnLastName;
@synthesize sectionTitlesByFirstName;
@synthesize sectionTitlesByLastName;
@synthesize sortByLastName;


#pragma mark - Methods

-(id) init {
    self = [super init];
    if (self) {
        self.dataSortedOnFirstName = [NSMutableDictionary dictionary];
        self.dataSortedOnLastName = [NSMutableDictionary dictionary];
        self.sectionTitlesByFirstName = [NSMutableArray array];
        self.sectionTitlesByLastName = [NSMutableArray array];
        
        NSArray *patients = [ApplicationSupervisor instance].patients;
        for (Patient *p in patients) {
            [self addPatient:p];
        }
        
//        if ([patients count] > 0) {
//            // Sort data in each section.
//            [self presortSections];
//        }
        
        [self subscribeToNotifications:YES];
    }
    return self;
}

// Override sortByLastName setter to handle sorting.
-(void) setSortByLastName: (BOOL)b {
    if (sortByLastName != b) {
        sortByLastName =  b;
        // Re-sort
        [self presortSections];
    }
}

-(NSArray *) getSectionReadonlyForFirstNameKey: (NSString *)key {
    return [NSArray arrayWithArray:[self.dataSortedOnFirstName objectForKey:[key capitalizedString]]];
}

-(NSArray *) getSectionReadonlyForLastNameKey: (NSString *)key {
    return [NSArray arrayWithArray:[self.dataSortedOnLastName objectForKey:[key capitalizedString]]];
}

/**
 */
-(void) addPatient: (Patient *)newPatient {
    NSString *firstStartLetter = @"";
    if ([newPatient.firstName length] > 0) {
        firstStartLetter = [[newPatient.firstName substringToIndex:1] uppercaseString];
    }
    NSString *lastStartLetter = @"";
    if ([newPatient.lastName length] > 0) {
        lastStartLetter = [[newPatient.lastName substringToIndex:1] uppercaseString];
    }
    
    // Add to first name dictionary.
    if (![self tryInsertPatient:newPatient withIndex:firstStartLetter byFirstName: YES]) {
        // There is no first name, so must use last name.
        [self tryInsertPatient:newPatient withIndex:lastStartLetter byFirstName: YES];
    }
    
    // Then add to last name dictionary.
    if (![self tryInsertPatient:newPatient withIndex:lastStartLetter byFirstName: NO]) {
        //There is no last name, so must use first name.
        [self tryInsertPatient:newPatient withIndex:firstStartLetter byFirstName: NO];
    }
}

/**
 */
-(void) updatePatient: (Patient *)patient fromOldFirstName: (NSString *)oldFirst andLastName: (NSString *)oldLast {
    NSString *oldFirstStartLetter = @"";
    if ([oldFirst length] > 0) {
        oldFirstStartLetter = [[oldFirst substringToIndex:1] uppercaseString];
    }
    NSString *oldLastStartLetter = @"";
    if ([oldLast length] > 0) {
        oldLastStartLetter = [[oldLast substringToIndex:1] uppercaseString];
    }
    
    // If the first name was changed, try to remove patient from being referenced by old name, 
    // whether in the data sorted by first or last name..
    if (![oldFirst isEqualToString:patient.firstName]) {
        if (![self tryRemovePatient:patient withIndex:oldFirstStartLetter byFirstName: YES]) {
            [self tryRemovePatient:patient withIndex:oldFirstStartLetter byFirstName: NO];
        }
    }
    // If the last name was changed, try to remove patient from being referenced by old name,
    // whether in the data sorted by last or first name.
    if (![oldLast isEqualToString:patient.lastName]) {
        if (![self tryRemovePatient:patient withIndex:oldLastStartLetter byFirstName: NO]) {
            [self tryRemovePatient:patient withIndex:oldLastStartLetter byFirstName: YES];
        }
    }
    
    // Add the patient back in, which will re-sort it's position.
    [self addPatient:patient];
}

/**
 */
-(void) removePatient: (Patient *)obsoletePatient {
    NSString *firstStartLetter = @"";
    if ([obsoletePatient.firstName length] > 0) {
        firstStartLetter = [[obsoletePatient.firstName substringToIndex:1] uppercaseString];
    }
    NSString *lastStartLetter = @"";
    if ([obsoletePatient.lastName length] > 0) {
        lastStartLetter = [[obsoletePatient.lastName substringToIndex:1] uppercaseString];
    }
    
    // First remove patient from the first name dictionary.
    if (![self tryRemovePatient:obsoletePatient withIndex:firstStartLetter byFirstName: YES]) {
        // There is no first name, so must use last name.
        [self tryRemovePatient:obsoletePatient withIndex:lastStartLetter byFirstName: YES];
    }
    
    // Then remove patient from the first name dictionary.
    if (![self tryRemovePatient:obsoletePatient withIndex:lastStartLetter byFirstName: NO]) {
        //There is no last name, so must use first name.
        [self tryRemovePatient:obsoletePatient withIndex:firstStartLetter byFirstName: NO];
    }
}

/**
 */
-(Patient *) getPatientForPath: (NSIndexPath *)path {
    Patient * p;
    if (sortByLastName) {
        p = [[self.dataSortedOnLastName objectForKey: [self.sectionTitlesByLastName objectAtIndex: path.section]] objectAtIndex: path.row];
    }
    else {
        p = [[self.dataSortedOnFirstName objectForKey: [self.sectionTitlesByFirstName objectAtIndex: path.section]] objectAtIndex: path.row];
    }
    return p;
}

-(NSIndexPath *) indexPathForPatient: (Patient *)p {
    NSString *firstStartLetter = @"";
    if ([p.firstName length] > 0) {
        firstStartLetter = [[p.firstName substringToIndex:1] uppercaseString];
    }
    NSString *lastStartLetter = @"";
    if ([p.lastName length] > 0) {
        lastStartLetter = [[p.lastName substringToIndex:1] uppercaseString];
    }
    NSInteger section = NSNotFound;
    NSInteger row = NSNotFound;
    
    if (sortByLastName) {
        NSArray *sectionData = [self.dataSortedOnLastName objectForKey: lastStartLetter];
        if ([sectionData containsObject:p]) {
            section = [self.sectionTitlesByLastName indexOfObject:lastStartLetter];
            row = [sectionData indexOfObject:p];
        }
        else {
            // Wasn't held by last name, try first.
            sectionData = [self.dataSortedOnLastName objectForKey: firstStartLetter];
            if ([sectionData containsObject:p]) {
                section = [self.sectionTitlesByLastName indexOfObject:firstStartLetter];
                row = [sectionData indexOfObject:p];
            }
        }
    }
    else {
        NSArray *sectionData = [self.dataSortedOnFirstName objectForKey: firstStartLetter];
        if ([sectionData containsObject:p]) {
            section = [self.sectionTitlesByFirstName indexOfObject:firstStartLetter];
            row = [sectionData indexOfObject:p];
        }
        else {
            // Wasn't held by first name, try last.
            sectionData = [self.dataSortedOnFirstName objectForKey: lastStartLetter];
            if ([sectionData containsObject:p]) {
                section = [self.sectionTitlesByFirstName indexOfObject:lastStartLetter];
                row = [sectionData indexOfObject:p];
            }
        }
    }
    
    if (section != NSNotFound && row != NSNotFound) {
        return [NSIndexPath indexPathForRow:row inSection:section];
    }
    return nil;
}

                                   
#pragma mark UITableViewDataSource Methods

/**
 */
-(UITableViewCell *) tableView: (UITableView *)tableView cellForRowAtIndexPath: (NSIndexPath *)indexPath {
    PatientTableViewCell *cell = [TableCellFactory createSortablePatientCellForTable:tableView withIdentifier:@"PatientListCell" withTag:indexPath.row];
    // set the patient for this cell as specified by the datasource.
    cell.patient = [self getPatientForPath: indexPath];
    cell.emphasisOnLastName = sortByLastName;

    return cell;
}

/**
 */
-(NSInteger) numberOfSectionsInTableView: (UITableView *)tableView {
    if (sortByLastName) {
        return [sectionTitlesByLastName count];
    }
    else {
        return [sectionTitlesByFirstName count];
    }
}

/**
 */
-(NSArray *) sectionIndexTitlesForTableView: (UITableView *)tableView {
    if (sortByLastName) {
        return sectionTitlesByLastName;
    }
    else {
        return sectionTitlesByFirstName;
    }
}

/**
 */
-(NSInteger) tableView: (UITableView *)tableView sectionForSectionIndexTitle: (NSString *)title atIndex: (NSInteger)index {
    //TODO: this is wrong, fix it
	return index;
}

/**
 */
-(NSInteger) tableView: (UITableView *)tableView  numberOfRowsInSection: (NSInteger)sectionIndex {
    NSArray *section;
    
    if (sortByLastName) {
        NSString *firstLetter = [sectionTitlesByLastName objectAtIndex: sectionIndex];
        section = [dataSortedOnLastName objectForKey: firstLetter];
    }
    else {
        NSString *firstLetter = [sectionTitlesByFirstName objectAtIndex: sectionIndex];
        section = [dataSortedOnFirstName objectForKey: firstLetter];
    }

    // return the count
    return [section count];
}

/**
 */
-(NSString *) tableView: (UITableView *)tableView titleForHeaderInSection: (NSInteger)sectionIndex {
    if (sortByLastName) {
        return [sectionTitlesByLastName objectAtIndex: sectionIndex];
    }
    else {
        return [sectionTitlesByFirstName objectAtIndex: sectionIndex];
    }
}


#pragma mark Memory Management

-(void) dealloc {
    [self subscribeToNotifications:NO];
    self.dataSortedOnFirstName = nil;
    self.dataSortedOnLastName = nil;
    self.sectionTitlesByFirstName = nil;
    self.sectionTitlesByLastName = nil;
    [super dealloc];
}


#pragma mark Private Methods

/**
 */
-(void) presortSections {
    if (sortByLastName) {
        for (NSString *sectionTitle in sectionTitlesByLastName) {
            NSMutableArray *newSort = [self alphabetizeSection: [self.dataSortedOnLastName objectForKey: sectionTitle]];
            [self.dataSortedOnLastName setObject:newSort forKey:sectionTitle];
            [newSort release];
        }
    }
    else {
        for (NSString *sectionTitle in sectionTitlesByFirstName) {
            NSMutableArray *newSort = [self alphabetizeSection: [self.dataSortedOnFirstName objectForKey: sectionTitle]];
            [self.dataSortedOnFirstName setObject:newSort forKey:sectionTitle];
            [newSort release];
        }
    }
}

/**
 Alphabetizes a section of Patients on last name 1st and first name 2nd.
 */
-(NSMutableArray *) alphabetizeSection: (NSArray *)sectionArray {    
//    NSSortDescriptor *fNameDescriptor = [[NSSortDescriptor alloc] initWithKey:@"firstName"
//                                                                   ascending:NO
//                                                                    selector:@selector(localizedCompare:)] ;
//    NSSortDescriptor *lNameDescriptor = [[NSSortDescriptor alloc] initWithKey:@"lastName"
//                                                                   ascending:NO
//                                                                    selector:@selector(localizedCompare:)] ;
//    // Putting the last name SortDescriptor in first seems to make it sort first.
//    NSArray *descriptors = [NSArray arrayWithObjects: lNameDescriptor, fNameDescriptor, nil];
//    [sectionArray sortUsingDescriptors: descriptors];
//    [fNameDescriptor release];
//    [lNameDescriptor release];
    
    return [NSMutableArray arrayWithArray: [sectionArray sortedArrayUsingSelector:@selector(compareByFullName:)]];
}

/**
 Try to insert a new patient in either the FirstName or LastName data using the given index character.
 */
-(BOOL) tryInsertPatient: (Patient *)p withIndex: (NSString *)i byFirstName: (BOOL)byFirstName {
    BOOL success = YES;
    if ([i length] > 0) {
        NSMutableArray *section;
        
        if (byFirstName) {
            section = [self.dataSortedOnFirstName valueForKey: i];
            
            if (section) {
                // Add the patient to the section data array.
                [section addObject: p];
                // Need to sort the contents in this section.
                [self.dataSortedOnFirstName setObject: [self alphabetizeSection: section] forKey: i];
            } 
            else {
                NSMutableArray *newData = [[NSMutableArray alloc] init];
                [newData addObject: p];
                [self.dataSortedOnFirstName setObject: newData forKey: i];
                // Need to rebuild and sort the indexable section titles.
                self.sectionTitlesByFirstName = [NSMutableArray arrayWithArray: [[self.dataSortedOnFirstName allKeys] sortedArrayUsingSelector:@selector(localizedCaseInsensitiveCompare:)]];
                [newData release];
            }
        }
        else {
            section = [self.dataSortedOnLastName valueForKey: i];
            
            if (section) {
                // Add the patient to the section data array.
                [section addObject: p];
                // Need to sort the contents in this section.
                [self.dataSortedOnLastName setObject: [self alphabetizeSection: section] forKey: i];
            } 
            else {
                NSMutableArray *newData = [[NSMutableArray alloc] init];
                [newData addObject: p];
                [self.dataSortedOnLastName setObject: newData forKey: i];
                // Need to rebuild and sort the indexable section titles.
                self.sectionTitlesByLastName = [NSMutableArray arrayWithArray: [[self.dataSortedOnLastName allKeys] sortedArrayUsingSelector:@selector(localizedCaseInsensitiveCompare:)]];
                [newData release];
            }     
        }
    }
    else {
        success = NO;
    }
    return success;
}

/**
 */
-(BOOL) tryRemovePatient: (Patient *)p withIndex: (NSString *)i byFirstName: (BOOL)byFirstName {
    BOOL success = YES;
    NSMutableArray *section;
    if (byFirstName) {
        section = [dataSortedOnFirstName valueForKey: i];
    }
    else {
        section = [dataSortedOnLastName valueForKey: i];
    }
    if (section) {
        // Remove the patient from the section data array.
        [section removeObject: p];
        // If removal leaves an empty section, remove it too.
        if ([section count] == 0) {
            if (byFirstName) {
                [self.dataSortedOnFirstName removeObjectForKey: i];
                [self.sectionTitlesByFirstName removeObject: i];
            }
            else {
                [self.dataSortedOnLastName removeObjectForKey: i];
                [self.sectionTitlesByLastName removeObject: i];
            }
        }
        section = nil;
    }
    else {
        success = NO;
    }
    return success;
}


#pragma mark Event Handling

-(void) handlePatientCellWillUpdate: (NSNotification *)notification {
    PatientTableViewCell *cell = (PatientTableViewCell *)[notification object];
    // Use the outdated first and last name held by the cell to update data collections with new patient name values.
    [self updatePatient:cell.patient fromOldFirstName:cell.firstNameText andLastName:cell.lastNameText];
}

-(void) subscribeToNotifications: (BOOL)yesNo {
    if (yesNo) {
        [[ApplicationSupervisor instance] addTableViewCellWillUpdateObserver:self withHandler:@selector(handlePatientCellWillUpdate:)];
    }
    else {
        [[ApplicationSupervisor instance] removeTableViewCellWillUpdateObserver:self];
    }
}

@end
